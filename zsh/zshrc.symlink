# shortcut to this dotfiles path
export DOTFILES=$HOME/Developer/dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/Developer

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# added by travis gem
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('~/Developer/miniforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "~/Developer/miniforge3/etc/profile.d/conda.sh" ]; then
        . "~/Developer/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="~/Developer/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# >>> conda_x86 initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_x86_setup="$('~/Developer/miniforge3_x86_64/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "~/Developer/miniforge3_x86_64/etc/profile.d/conda.sh" ]; then
        . "~/Developer/miniforge3_x86_64/etc/profile.d/conda.sh"
    else
        export PATH="~/Developer/miniforge3_x86_64/bin:$PATH"
    fi
fi
unset __conda_x86_setup
# <<< conda_x86 initialize <<<

export PATH="$HOME/.poetry/bin:$PATH"

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f ~/.nvm/versions/node/v14.16.1/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . ~/.nvm/versions/node/v14.16.1/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
! { which werf | grep -qsE "^~/.trdl/"; } && [[ -x "$HOME/bin/trdl" ]] && source $("$HOME/bin/trdl" use werf "1.2" "stable")
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
